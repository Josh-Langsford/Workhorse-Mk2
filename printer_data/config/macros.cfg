#####################################################################
#   Macros
#####################################################################

[delayed_gcode set_temeperature_leds]
initial_duration: 1
gcode:
    SET_TEMPERATURE_LED LED=headlight INDEX=2 SENSOR=extruder HOT_TEMP=260.0

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro G32]
gcode:
    {% set extruder_temp = printer.extruder.temperature %}
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    _CG28
    {% if extruder_temp > 150|float %}
      M109 S150
    {% endif %}
    CLEAN_NOZZLE
    QUAD_GANTRY_LEVEL
    G0 X340 Y350 F18000
    G28
    BED_MESH_CALIBRATE
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro SET_PART_FAN]
gcode:
    {% set fan_speed = params.SPEED|default(0)|float %}
    M106 S{fan_speed * 255}

[gcode_macro PRINT_PREP]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set chamber_temp = printer['temperature_sensor chamber'].temperature %}
  {% set target_bed = params.BED|default(110)|float %}
  {% set target_chamber = params.CHAMBER|default(46)|float %}
  
  G90
  M104 S150
  M140 S{target_bed}
  _CG28
  {% if chamber_temp < target_chamber|float %}
    G0 Z100 F1800
    G0 X175 Y175 F18000
    SET_PART_FAN SPEED=0.5
  {% endif %}
  
  TEMPERATURE_WAIT SENSOR='temperature_sensor chamber' MINIMUM={target_chamber}
  M190 S{target_bed}
  M107
  PARK
  
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set chamber_temp = printer['temperature_sensor chamber'].temperature %}
  {% set target_extruder = params.EXTRUDER|default(260)|float %}
  {% set target_bed = params.BED|default(110)|float %}
  {% set target_chamber = params.CHAMBER|default(46)|float %}
  
  #M117 "Checking Part Cooling Fan"
  #PREFLIGHT_CHECK
  M117 "Initial Heating" 
  G90
  M104 S150
  M140 S{target_bed}
  _CG28
  {% if chamber_temp < target_chamber|float %}
    G0 Z100 F1800
    G0 X175 Y175 F18000
    SET_PART_FAN SPEED=0.5
  {% endif %}
  TEMPERATURE_WAIT SENSOR='temperature_sensor chamber' MINIMUM={target_chamber}
  M190 S{target_bed}
  M107

  M117 "Homing"
  G32                  

  M117 "Final Heating"
  M109 S{target_extruder}

  M117 "Priming"
  M83
  G1 E20 F600
  CLEAN_NOZZLE

  SFS_ENABLE
  M117 "Printing"

[gcode_macro PARK]
gcode:
    _CG28                          ; home all axes if not already
    G90                            ; absolute positioning
    G0 X50 Y353 F18000             ; park nozzle at rear
   

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament

    SFS_DISABLE
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    PARK
    M107                                     ; turn off fan
    M117 "Print Finished"
    
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SFS_DISABLE                                                                          ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F1800                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        PARK
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        #M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
        M117 "Print Paused"
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(100)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SFS_ENABLE                                                                   ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 E20.0 F600
            G4 P{2000}
            G1 Z{zhop * -1} F1800                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F1800                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
        M117 "Printing"
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro UNLOAD_FILAMENT]
gcode:
    # Parameters
    {% set target_extruder = params.EXTRUDER|default(260)|float %}

    PARK
    M117 "Heating"
    M109 S{target_extruder}
    M117 "Retracting"
    M83
    G1 E20.0 F600
    G1 E-100 F600
    M117 "Insert filament"
    G0 X75 Y0 F18000

    
[gcode_macro LOAD_FILAMENT]
gcode:
    # Parameters
    {% set target_extruder = params.EXTRUDER|default(260)|float %}

    PARK
    M117 "Heating"
    M109 S{target_extruder}
    M117 "Priming"
    M83
    G1 E100.0 F600
    M117 "Filament Primed"
   

[gcode_macro M600]
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    M117 "Retracting"
    M83
    G1 E20.0 F600
    G1 E-100 F1800
    M117 "Insert filament"
    G90
    G0 X75 Y0 F18000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro QUICK_HEAT]
gcode:
    # Parameters
    {% set target_extruder = params.EXTRUDER|default(150)|float %}
    {% set target_bed = params.BED|default(110)|float %}

    M104 S{target_extruder}
    M140 S{target_bed}

[gcode_macro HEATERS_OFF]
gcode:
    M104 S0
    M140 S0